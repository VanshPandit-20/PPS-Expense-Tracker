# Modern Expense Tracker App for Jupyter (Dark UI + CSV + Analysis + Budget Alerts)

import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Initialize global variables
user_data = {}
transactions = pd.DataFrame(columns=['Date', 'Label', 'Amount', 'Category'])
USER_CSV_FOLDER = 'users'
os.makedirs(USER_CSV_FOLDER, exist_ok=True)

# ------------------ UI Theme ------------------
BG_COLOR = '#1e1b2e'
FG_COLOR = '#f0e6ff'
BTN_COLOR = '#4a3f6b'
ENTRY_BG = '#2e294e'
FONT = ('Helvetica', 12)
BUDGET_LIMIT = -10000  # Default monthly expense limit

# ------------------ Core Functions ------------------
def save_user_data(username):
    transactions.to_csv(f'{USER_CSV_FOLDER}/{username}.csv', index=False)

def load_user_data(username):
    global transactions
    try:
        transactions = pd.read_csv(f'{USER_CSV_FOLDER}/{username}.csv')
    except FileNotFoundError:
        transactions = pd.DataFrame(columns=['Date', 'Label', 'Amount', 'Category'])

def calculate_balance():
    return transactions['Amount'].sum()

def check_budget_alert():
    this_month = pd.Timestamp.now().month
    this_year = pd.Timestamp.now().year
    monthly_expenses = transactions[
        (pd.to_datetime(transactions['Date']).dt.month == this_month) &
        (pd.to_datetime(transactions['Date']).dt.year == this_year) &
        (transactions['Amount'] < 0)
    ]['Amount'].sum()
    if monthly_expenses <= BUDGET_LIMIT:
        messagebox.showwarning("Budget Alert", f"You've exceeded your monthly budget of ₹{-BUDGET_LIMIT}. Current expenses: ₹{abs(monthly_expenses):.2f}")

# ------------------ UI Functions ------------------
def login_window():
    login = tk.Tk()
    login.title("Login")
    login.configure(bg=BG_COLOR)

    tk.Label(login, text="Username", bg=BG_COLOR, fg=FG_COLOR, font=FONT).pack(pady=5)
    username_entry = tk.Entry(login, bg=ENTRY_BG, fg=FG_COLOR, font=FONT)
    username_entry.pack(pady=5)

    def handle_login():
        username = username_entry.get()
        if not username:
            messagebox.showerror("Error", "Username required")
            return
        global user_data
        user_data['username'] = username
        load_user_data(username)
        login.destroy()
        main_menu()

    tk.Button(login, text="Login / Register", bg=BTN_COLOR, fg=FG_COLOR, command=handle_login, font=FONT).pack(pady=10)
    login.mainloop()

def main_menu():
    root = tk.Tk()
    root.title("Expense Tracker")
    root.configure(bg=BG_COLOR)

    balance = calculate_balance()
    tk.Label(root, text=f"Welcome {user_data['username']} | Balance: ₹{balance:.2f}", bg=BG_COLOR, fg=FG_COLOR, font=('Helvetica', 14, 'bold')).pack(pady=10)

    def add_transaction():
        window = tk.Toplevel(root)
        window.title("Add Transaction")
        window.configure(bg=BG_COLOR)

        tk.Label(window, text="Label", bg=BG_COLOR, fg=FG_COLOR, font=FONT).pack()
        label_entry = tk.Entry(window, bg=ENTRY_BG, fg=FG_COLOR, font=FONT)
        label_entry.pack()

        tk.Label(window, text="Amount (+income / -expense)", bg=BG_COLOR, fg=FG_COLOR, font=FONT).pack()
        amount_entry = tk.Entry(window, bg=ENTRY_BG, fg=FG_COLOR, font=FONT)
        amount_entry.pack()

        tk.Label(window, text="Category", bg=BG_COLOR, fg=FG_COLOR, font=FONT).pack()
        category_entry = tk.Entry(window, bg=ENTRY_BG, fg=FG_COLOR, font=FONT)
        category_entry.pack()

        def save():
            try:
                amt = float(amount_entry.get())
                new_row = {
                    'Date': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'Label': label_entry.get(),
                    'Amount': amt,
                    'Category': category_entry.get()
                }
                global transactions
                transactions = pd.concat([transactions, pd.DataFrame([new_row])], ignore_index=True)
                save_user_data(user_data['username'])
                window.destroy()
                check_budget_alert()
            except ValueError:
                messagebox.showerror("Invalid Input", "Amount must be a number")

        tk.Button(window, text="Save", command=save, bg=BTN_COLOR, fg=FG_COLOR, font=FONT).pack(pady=10)

    def view_transactions():
        window = tk.Toplevel(root)
        window.title("Transaction History")
        window.configure(bg=BG_COLOR)

        sorted_data = transactions.sort_values('Date', ascending=False)

        text = tk.Text(window, bg=ENTRY_BG, fg=FG_COLOR, font=('Courier', 10))
        text.pack()
        text.insert(tk.END, sorted_data.to_string(index=False))

        fig, ax = plt.subplots(figsize=(6, 3))
        sorted_data['Date'] = pd.to_datetime(sorted_data['Date'])
        sorted_data.groupby(sorted_data['Date'].dt.date)['Amount'].sum().plot(kind='bar', ax=ax, color='purple')
        ax.set_title('Daily Net Transactions')
        ax.set_ylabel('Amount')
        canvas = FigureCanvasTkAgg(fig, master=window)
        canvas.draw()
        canvas.get_tk_widget().pack()

    def show_analysis():
        window = tk.Toplevel(root)
        window.title("Spending Analysis")
        window.configure(bg=BG_COLOR)

        expenses = transactions[transactions['Amount'] < 0]
        grouped = expenses.groupby('Category')['Amount'].sum()

        fig, ax = plt.subplots()
        grouped.plot(kind='pie', autopct='%1.1f%%', ax=ax, startangle=90)
        ax.set_ylabel('')
        ax.set_title('Expense Breakdown by Category')

        canvas = FigureCanvasTkAgg(fig, master=window)
        canvas.draw()
        canvas.get_tk_widget().pack()

    tk.Button(root, text="Add Transaction", command=add_transaction, bg=BTN_COLOR, fg=FG_COLOR, font=FONT).pack(pady=5)
    tk.Button(root, text="View Transactions", command=view_transactions, bg=BTN_COLOR, fg=FG_COLOR, font=FONT).pack(pady=5)
    tk.Button(root, text="Show Analysis", command=show_analysis, bg=BTN_COLOR, fg=FG_COLOR, font=FONT).pack(pady=5)
    tk.Button(root, text="Exit", command=root.destroy, bg='red', fg='white', font=FONT).pack(pady=10)

    root.mainloop()

# ------------------ Run App ------------------
login_window()
